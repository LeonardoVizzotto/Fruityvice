import type { NextPage } from 'next';
import Head from 'next/head';
import Card from '../components/Card';
import Footer from '../components/Footer';
import Toolbar from '../components/Toolbar';
import { HomeContainer, Main } from '../styles/pages/Home';
import CardGrid from '../components/CardGrid';
import usePagination from '../hooks/usePagination';
import PaginationControls from '../components/PaginationControls';
import { useEffect, useState } from 'react';
import Button from '../components/Button';

export interface Fruit {
  family: string;
  genus: string;
  id: number;
  name: string;
  nutritions: {
    calories: number;
    carbohydrates: number;
    fat: number;
    protein: number;
    sugar: number;
  };
  order: string;
  selected: boolean;
}

interface HomeProps {
  data: Fruit[];
}

const Home: NextPage<HomeProps> = props => {
  const [fruitList, setFruitList] = useState(props.data);

  const { currentPage, getCurrentData, setCurrentPage, pageCount } =
    usePagination<Fruit>(fruitList, 8);

  useEffect(() => {
    setFruitList(props.data);
  }, [props]);

  const toggleFruitSelection = (fruitId: number) => {
    setFruitList(
      fruitList.map(f =>
        f.id === fruitId ? { ...f, selected: !f.selected } : f
      )
    );
  };

  const generateRandomSelection = () => {
    let total = Math.floor(Math.random() * (5 - 3) + 3);
    const selectedIndexes: number[] = [];
    while (total > 0) {
      total--;
      selectedIndexes.push(Math.floor(Math.random() * fruitList.length));
    }

    setFruitList(
      fruitList.map((fruit, i) =>
        selectedIndexes.includes(i)
          ? { ...fruit, selected: true }
          : { ...fruit, selected: false }
      )
    );
  };

  return (
    <HomeContainer>
      <Head>
        <title>Fruit Salad</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Toolbar fruits={fruitList.filter(f => f.selected)} />
      <Main>
        <h1>Let's make a fruit salad!</h1>
        <span>
          Pick a minimum of 3 fruits and make a delicious fruit salad!
        </span>
        <Button onClick={generateRandomSelection}>Random generator</Button>
        <CardGrid data-test-id="card-grid-test-id">
          {getCurrentData().map(fruit => (
            <Card
              key={fruit.id}
              fruit={fruit}
              toggleCard={toggleFruitSelection}
            />
          ))}
        </CardGrid>
        <PaginationControls
          pageCount={pageCount}
          setCurrentPage={setCurrentPage}
          currentPage={currentPage}
        />
      </Main>
      <Footer></Footer>
    </HomeContainer>
  );
};

export async function getServerSideProps() {
  const res = await fetch(`https://www.fruityvice.com/api/fruit/all`);
  const data = await res.json();

  return { props: { data } };
}

export default Home;
